{"version":3,"file":"static/webpack/static/development/pages/rooms.js.80dc74a393ccc6b86d99.hot-update.js","sources":["webpack:///./pages/rooms.tsx"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport Peer from \"skyway-js\";\n\nimport { API_PATH, SKYWAY_API_KEY } from \"./env\";\n\nconst Rooms = (props) => {\n  const localStreamSetting = async () => {\n    localStreamRef.current.srcObject = await navigator.mediaDevices.getUserMedia(\n      {\n        audio: true,\n        video: true,\n      }\n    );\n    await localStreamRef.current.play();\n  };\n\n  const localStreamRef = useRef<HTMLVideoElement>(null);\n  const remoteStreamRef = useRef<HTMLVideoElement>(null);\n\n  const [localId, setLocalId] = useState(\"\");\n  const [localVideoMuted, setLocalVideoMuted] = useState(true);\n  const [localVideoPlaysInline, setLocalVideoPlaysInline] = useState(true);\n\n  const [remoteId, setRemoteId] = useState(\"\");\n  const [remoteVideoMuted, setRemoteVideoMuted] = useState(true);\n  const [remoteVideoPlaysInline, setRemoteVideoPlaysInline] = useState(false);\n\n  const peer = new Peer({ key: SKYWAY_API_KEY });\n\n  const callTrigerClick = async () => {\n    // Note that you need to ensure the peer has connected to signaling server\n    // before using methods of peer instance.\n    if (!peer.open) {\n      return;\n    }\n\n    const mediaConnection = peer.call(\n      remoteId,\n      await navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true,\n      })\n    );\n\n    mediaConnection.on(\"stream\", async (stream: MediaStream) => {\n      // Render remote stream for caller\n      remoteStreamRef.current.srcObject = stream;\n      setRemoteVideoPlaysInline(true);\n      await remoteStreamRef.current.play().catch(console.error);\n    });\n\n    mediaConnection.once(\"close\", () => {\n      if (remoteStreamRef.current.srcObject instanceof MediaStream)\n        remoteStreamRef.current.srcObject\n          .getTracks()\n          .forEach((track) => track.stop());\n      remoteStreamRef.current.srcObject = null;\n    });\n\n    const connectionClose = () => mediaConnection.close(true);\n  };\n\n  peer.once(\"open\", (id: string) => setLocalId(id));\n\n  // Register callee handler\n  peer.on(\"call\", (mediaConnection) => {\n    if (localStreamRef.current.srcObject instanceof MediaStream)\n      mediaConnection.answer(localStreamRef.current.srcObject);\n\n    mediaConnection.on(\"stream\", async (stream) => {\n      // Render remote stream for callee\n      remoteStreamRef.current.srcObject = stream;\n      setRemoteVideoPlaysInline(true);\n      await remoteStreamRef.current.play().catch(console.error);\n    });\n\n    mediaConnection.once(\"close\", () => {\n      if (remoteStreamRef.current.srcObject instanceof MediaStream)\n        remoteStreamRef.current.srcObject\n          .getTracks()\n          .forEach((track) => track.stop());\n      remoteStreamRef.current.srcObject = null;\n    });\n\n    document\n      .getElementById(\"close-trigger\")\n      .addEventListener(\"click\", () => mediaConnection.close(true));\n  });\n  peer.on(\"error\", console.error);\n\n  useEffect(() => {\n    (async () => {\n      await localStreamSetting();\n    })();\n  }, []);\n  return (\n    <div>\n      <div className=\"container\">\n        <h1 className=\"heading\">Room Example タイトル</h1>\n        <p className=\"note\">Enter remote peer ID to call.</p>\n        <div className=\"p2p-media\">\n          <div className=\"remote-stream\">\n            <video\n              id=\"video-remote-stream\"\n              muted={remoteVideoMuted}\n              ref={remoteStreamRef}\n              playsInline={remoteVideoPlaysInline}\n            ></video>\n          </div>\n          <div className=\"local-stream\">\n            <video\n              id=\"video-local-stream\"\n              muted={localVideoMuted}\n              ref={localStreamRef}\n              playsInline={localVideoPlaysInline}\n            ></video>\n            <p>\n              Your ID: <span id=\"local-id\">{localId}</span>\n            </p>\n            <input\n              type=\"text\"\n              placeholder=\"Remote Peer ID\"\n              id=\"remote-id\"\n            ></input>\n            <button id=\"call-trigger\" onClick={callTrigerClick}>\n              Join\n            </button>\n            <button id=\"close-trigger\">Leave</button>\n          </div>\n        </div>\n      </div>\n      <ul></ul>\n    </div>\n  );\n};\n\nexport default Rooms;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AACA;AAHA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;AAbA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAqBA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAFA;AACA;AAVA;AAAA;AAOA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AA/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgCA;AAAA;AAAA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAGA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}