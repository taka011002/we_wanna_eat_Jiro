{"ast":null,"code":"var _jsxFileName = \"/Users/yuzi/myprograming/next-todo/pages/rooms.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport Peer from \"skyway-js\";\nimport { SKYWAY_API_KEY } from \"./env\";\n\nconst Rooms = props => {\n  const getRoomModeByHash = () => location.hash === \"#sfu\" ? \"sfu\" : \"mesh\";\n\n  const {\n    0: roomMode,\n    1: setRoomMode\n  } = useState(getRoomModeByHash());\n  const {\n    0: roomId,\n    1: setRoomId\n  } = useState(\"\");\n  const {\n    0: localVideoMuted,\n    1: setLocalVideoMuted\n  } = useState(true);\n  const {\n    0: localVideoPlaysInline,\n    1: setLocalVideoPlaysInline\n  } = useState(true);\n  const {\n    0: localVideoMessages,\n    1: setLocalVideoMessages\n  } = useState(\"\");\n  const peer = new Peer({\n    key: SKYWAY_API_KEY\n  });\n\n  const joinHandler = async () => {\n    // Note that you need to ensure the peer has connected to signaling server\n    // before using methods of peer instance.\n    if (!peer.open) {\n      return;\n    }\n\n    const room = peer.joinRoom(roomId, {\n      mode: getRoomModeByHash(),\n      stream: await navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true\n      })\n    });\n    room.once(\"open\", () => {\n      setLocalVideoMessages(localVideoMessages + \"=== You joined ===\\n\");\n    });\n    room.on(\"peerJoin\", peerId => {\n      setLocalVideoMessages(localVideoMessages + `=== ${peerId} joined ===\\n`);\n    }); // Render remote stream for new peer join in the room\n\n    room.on(\"stream\", async stream => {\n      const newVideo = document.createElement(\"video\");\n      newVideo.srcObject = stream;\n      setLocalVideoPlaysInline(true); // mark peerId to find it later at peerLeave event\n\n      newVideo.setAttribute(\"data-peer-id\", stream.peerId);\n      document.getElementById(\"remote-streams\").append(newVideo);\n      await newVideo.play().catch(console.error);\n    });\n    room.on(\"data\", ({\n      data,\n      src\n    }) => {\n      // Show a message sent to the room and who sent\n      setLocalVideoMessages(localVideoMessages + `${src}: ${data}\\n`);\n    }); // for closing room members\n\n    room.on(\"peerLeave\", peerId => {\n      const remoteVideo = document.getElementById(\"remote-streams\").querySelector(`[data-peer-id=${peerId}]`);\n      remoteVideo.srcObject.getTracks().forEach(track => track.stop());\n      remoteVideo.srcObject = null;\n      remoteVideo.remove();\n      messages.textContent += `=== ${peerId} left ===\\n`;\n    }); // for closing myself\n\n    room.once(\"close\", () => {\n      sendTrigger.removeEventListener(\"click\", onClickSend);\n      messages.textContent += \"== You left ===\\n\";\n      Array.from(remoteVideos.children).forEach(remoteVideo => {\n        remoteVideo.srcObject.getTracks().forEach(track => track.stop());\n        remoteVideo.srcObject = null;\n        remoteVideo.remove();\n      });\n    });\n    sendTrigger.addEventListener(\"click\", onClickSend);\n    leaveTrigger.addEventListener(\"click\", () => room.close(), {\n      once: true\n    });\n\n    function onClickSend() {\n      // Send message to all of the peers in the room via websocket\n      room.send(localText.value);\n      messages.textContent += `${peer.id}: ${localText.value}\\n`;\n      localText.value = \"\";\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"hashchange\", () => setRoomMode(getRoomModeByHash()));\n  }, []);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    className: \"heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, \"Room Example \\u30BF\\u30A4\\u30C8\\u30EB\"), __jsx(\"div\", {\n    className: \"room\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, __jsx(\"video\", {\n    id: \"local-stream\",\n    muted: localVideoMuted,\n    ref: async video => {\n      // Cannot set property 'srcObject' of null問題\n      video.srcObject = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true\n      });\n      await video.play();\n    },\n    playsInline: localVideoPlaysInline,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }), __jsx(\"span\", {\n    id: \"room-mode\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, roomMode), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"Room Name\",\n    id: \"room-id\",\n    onChange: e => {\n      setRoomId(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }), __jsx(\"button\", {\n    id: \"join-trigger\",\n    onClick: joinHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, \"Join\"), __jsx(\"button\", {\n    id: \"leave-trigger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, \"Leave\")), __jsx(\"div\", {\n    className: \"remote-streams\",\n    id: \"remote-streams\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, __jsx(\"pre\", {\n    className: \"messages\",\n    id: \"messages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, localVideoMessages), __jsx(\"input\", {\n    type: \"text\",\n    id: \"local-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }), __jsx(\"button\", {\n    id: \"send-trigger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, \"Send\")))), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }));\n};\n\nRooms.getInitialProps = async ({\n  query\n}) => {\n  return 1;\n};\n\nexport default Rooms;","map":{"version":3,"sources":["/Users/yuzi/myprograming/next-todo/pages/rooms.tsx"],"names":["useState","useEffect","Peer","SKYWAY_API_KEY","Rooms","props","getRoomModeByHash","location","hash","roomMode","setRoomMode","roomId","setRoomId","localVideoMuted","setLocalVideoMuted","localVideoPlaysInline","setLocalVideoPlaysInline","localVideoMessages","setLocalVideoMessages","peer","key","joinHandler","open","room","joinRoom","mode","stream","navigator","mediaDevices","getUserMedia","audio","video","once","on","peerId","newVideo","document","createElement","srcObject","setAttribute","getElementById","append","play","catch","console","error","data","src","remoteVideo","querySelector","getTracks","forEach","track","stop","remove","messages","textContent","sendTrigger","removeEventListener","onClickSend","Array","from","remoteVideos","children","addEventListener","leaveTrigger","close","send","localText","value","id","window","e","target","getInitialProps","query"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport Peer from \"skyway-js\";\n\nimport { API_PATH, SKYWAY_API_KEY } from \"./env\";\n\nconst Rooms = (props) => {\n  const getRoomModeByHash = () => (location.hash === \"#sfu\" ? \"sfu\" : \"mesh\");\n\n  const [roomMode, setRoomMode] = useState(getRoomModeByHash());\n  const [roomId, setRoomId] = useState(\"\");\n  const [localVideoMuted, setLocalVideoMuted] = useState(true);\n  const [localVideoPlaysInline, setLocalVideoPlaysInline] = useState(true);\n  const [localVideoMessages, setLocalVideoMessages] = useState(\"\");\n  const peer = new Peer({ key: SKYWAY_API_KEY });\n  const joinHandler = async () => {\n    // Note that you need to ensure the peer has connected to signaling server\n    // before using methods of peer instance.\n    if (!peer.open) {\n      return;\n    }\n\n    const room = peer.joinRoom(roomId, {\n      mode: getRoomModeByHash(),\n      stream: await navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true,\n      }),\n    });\n\n    room.once(\"open\", () => {\n      setLocalVideoMessages(localVideoMessages + \"=== You joined ===\\n\");\n    });\n    room.on(\"peerJoin\", (peerId) => {\n      setLocalVideoMessages(localVideoMessages + `=== ${peerId} joined ===\\n`);\n    });\n\n    // Render remote stream for new peer join in the room\n    room.on(\"stream\", async (stream) => {\n      const newVideo = document.createElement(\"video\");\n      newVideo.srcObject = stream;\n      setLocalVideoPlaysInline(true);\n      // mark peerId to find it later at peerLeave event\n      newVideo.setAttribute(\"data-peer-id\", stream.peerId);\n      document.getElementById(\"remote-streams\").append(newVideo);\n      await newVideo.play().catch(console.error);\n    });\n\n    room.on(\"data\", ({ data, src }) => {\n      // Show a message sent to the room and who sent\n      setLocalVideoMessages(localVideoMessages + `${src}: ${data}\\n`);\n    });\n\n    // for closing room members\n    room.on(\"peerLeave\", (peerId) => {\n      const remoteVideo = document\n        .getElementById(\"remote-streams\")\n        .querySelector(`[data-peer-id=${peerId}]`);\n      remoteVideo.srcObject.getTracks().forEach((track) => track.stop());\n      remoteVideo.srcObject = null;\n      remoteVideo.remove();\n\n      messages.textContent += `=== ${peerId} left ===\\n`;\n    });\n\n    // for closing myself\n    room.once(\"close\", () => {\n      sendTrigger.removeEventListener(\"click\", onClickSend);\n      messages.textContent += \"== You left ===\\n\";\n      Array.from(remoteVideos.children).forEach((remoteVideo) => {\n        remoteVideo.srcObject.getTracks().forEach((track) => track.stop());\n        remoteVideo.srcObject = null;\n        remoteVideo.remove();\n      });\n    });\n\n    sendTrigger.addEventListener(\"click\", onClickSend);\n    leaveTrigger.addEventListener(\"click\", () => room.close(), { once: true });\n\n    function onClickSend() {\n      // Send message to all of the peers in the room via websocket\n      room.send(localText.value);\n\n      messages.textContent += `${peer.id}: ${localText.value}\\n`;\n      localText.value = \"\";\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"hashchange\", () =>\n      setRoomMode(getRoomModeByHash())\n    );\n  }, []);\n\n  return (\n    <div>\n      <div className=\"container\">\n        <h1 className=\"heading\">Room Example タイトル</h1>\n        <div className=\"room\">\n          <div>\n            <video\n              id=\"local-stream\"\n              muted={localVideoMuted}\n              ref={async (video) => {\n                // Cannot set property 'srcObject' of null問題\n                video.srcObject = await navigator.mediaDevices.getUserMedia({\n                  audio: true,\n                  video: true,\n                });\n                await video.play();\n              }}\n              playsInline={localVideoPlaysInline}\n            ></video>\n            <span id=\"room-mode\">{roomMode}</span>\n            <input\n              type=\"text\"\n              placeholder=\"Room Name\"\n              id=\"room-id\"\n              onChange={(e) => {\n                setRoomId(e.target.value);\n              }}\n            />\n            <button id=\"join-trigger\" onClick={joinHandler}>\n              Join\n            </button>\n            <button id=\"leave-trigger\">Leave</button>\n          </div>\n          <div className=\"remote-streams\" id=\"remote-streams\"></div>\n          <div>\n            <pre className=\"messages\" id=\"messages\">\n              {localVideoMessages}\n            </pre>\n            <input type=\"text\" id=\"local-text\" />\n            <button id=\"send-trigger\">Send</button>\n          </div>\n        </div>\n      </div>\n      <ul></ul>\n    </div>\n  );\n};\n\nRooms.getInitialProps = async ({ query }) => {\n  return 1;\n};\n\nexport default Rooms;\n"]},"metadata":{},"sourceType":"module"}