{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/yuzi/myprograming/we_wanna_eat_Jiro/frontend/pages/rooms.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport Peer from \"skyway-js\";\nimport { SKYWAY_API_KEY } from \"./env\";\n\nvar Rooms = function Rooms(props) {\n  var getRoomModeByHash = function getRoomModeByHash() {\n    return location.hash === \"#sfu\" ? \"sfu\" : \"mesh\";\n  };\n\n  var getLocalStream = function getLocalStream() {\n    return _regeneratorRuntime.async(function getLocalStream$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(navigator.mediaDevices.getUserMedia({\n              audio: true,\n              video: true\n            })[\"catch\"](console.error));\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var _useState = useState(getRoomModeByHash()),\n      roomMode = _useState[0],\n      setRoomMode = _useState[1];\n\n  var _useState2 = useState(true),\n      localVideoMuted = _useState2[0],\n      setLocalVideoMuted = _useState2[1];\n\n  var _useState3 = useState(new MediaStream()),\n      localVideoStream = _useState3[0],\n      setLocalVideoStream = _useState3[1];\n\n  var _useState4 = useState(true),\n      localVideoPlaysInline = _useState4[0],\n      setLocalVideoPlaysInline = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      localVideoMessages = _useState5[0],\n      setLocalVideoMessages = _useState5[1];\n\n  var joinHandler = function joinHandler() {\n    var peer, room;\n    return _regeneratorRuntime.async(function joinHandler$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            peer = new Peer({\n              key: SKYWAY_API_KEY\n            });\n\n            if (peer.open) {\n              _context3.next = 3;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 3:\n            _context3.t0 = peer;\n            _context3.t1 = roomId;\n            _context3.t2 = getRoomModeByHash();\n            _context3.next = 8;\n            return _regeneratorRuntime.awrap(getLocalStream());\n\n          case 8:\n            _context3.t3 = _context3.sent;\n            _context3.t4 = {\n              mode: _context3.t2,\n              stream: _context3.t3\n            };\n            room = _context3.t0.joinRoom.call(_context3.t0, _context3.t1, _context3.t4);\n            room.once(\"open\", function () {\n              setLocalVideoMessages(localVideoMessages + \"=== You joined ===\\n\");\n            });\n            room.on(\"peerJoin\", function (peerId) {\n              setLocalVideoMessages(localVideoMessages + \"=== \".concat(peerId, \" joined ===\\n\"));\n            }); // Render remote stream for new peer join in the room\n\n            room.on(\"stream\", function _callee(stream) {\n              var newVideo;\n              return _regeneratorRuntime.async(function _callee$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      newVideo = document.createElement(\"video\");\n                      newVideo.srcObject = stream;\n                      setLocalVideoPlaysInline(true); // mark peerId to find it later at peerLeave event\n\n                      newVideo.setAttribute(\"data-peer-id\", stream.peerId);\n                      document.getElementById(\"remote-streams\").append(newVideo);\n                      _context2.next = 7;\n                      return _regeneratorRuntime.awrap(newVideo.play()[\"catch\"](console.error));\n\n                    case 7:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            });\n            room.on(\"data\", function (_ref) {\n              var data = _ref.data,\n                  src = _ref.src;\n              // Show a message sent to the room and who sent\n              setLocalVideoMessages(localVideoMessages + \"\".concat(src, \": \").concat(data, \"\\n\"));\n            });\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    window.addEventListener(\"hashchange\", function () {\n      return setRoomMode(getRoomModeByHash());\n    });\n    getLocalStream().then(function (stream) {\n      setLocalVideoStream(stream);\n      return joinHandler();\n    }).then(function () {});\n  }, [localVideoStream]);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    className: \"heading\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"Room Example \\u30BF\\u30A4\\u30C8\\u30EB\"), __jsx(\"p\", {\n    className: \"note\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"Enter remote peer ID to call.\"), __jsx(\"div\", {\n    className: \"p2p-media\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"remote-stream\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, __jsx(\"video\", {\n    id: \"video-remote-stream\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    className: \"local-stream\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, __jsx(\"video\", {\n    id: \"video-local-stream\",\n    muted: localVideoMuted,\n    ref: function _callee2(video) {\n      return _regeneratorRuntime.async(function _callee2$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(getLocalStream());\n\n            case 2:\n              video.srcObject = _context4.sent;\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(video.play());\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    playsInline: localVideoPlaysInline,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, \"Your ID: \", __jsx(\"span\", {\n    id: \"local-id\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 24\n    }\n  })), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"Remote Peer ID\",\n    id: \"remote-id\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }), __jsx(\"button\", {\n    id: \"call-trigger\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, \"Join\"), __jsx(\"button\", {\n    id: \"close-trigger\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, \"Leave\")))), __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }));\n};\n\nRooms.getInitialProps = function _callee3(_ref2) {\n  var query;\n  return _regeneratorRuntime.async(function _callee3$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          query = _ref2.query;\n          return _context5.abrupt(\"return\", 1);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Rooms;","map":{"version":3,"sources":["/Users/yuzi/myprograming/we_wanna_eat_Jiro/frontend/pages/rooms.tsx"],"names":["useState","useEffect","Peer","SKYWAY_API_KEY","Rooms","props","getRoomModeByHash","location","hash","getLocalStream","navigator","mediaDevices","getUserMedia","audio","video","console","error","roomMode","setRoomMode","localVideoMuted","setLocalVideoMuted","MediaStream","localVideoStream","setLocalVideoStream","localVideoPlaysInline","setLocalVideoPlaysInline","localVideoMessages","setLocalVideoMessages","joinHandler","peer","key","open","roomId","mode","stream","room","joinRoom","once","on","peerId","newVideo","document","createElement","srcObject","setAttribute","getElementById","append","play","data","src","window","addEventListener","then","getInitialProps","query"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport Peer from \"skyway-js\";\n\nimport { API_PATH, SKYWAY_API_KEY } from \"./env\";\n\nconst Rooms = (props) => {\n  const getRoomModeByHash = () => (location.hash === \"#sfu\" ? \"sfu\" : \"mesh\");\n\n  const getLocalStream = async () =>\n    await navigator.mediaDevices\n      .getUserMedia({\n        audio: true,\n        video: true,\n      })\n      .catch(console.error);\n\n  const [roomMode, setRoomMode] = useState(getRoomModeByHash());\n  const [localVideoMuted, setLocalVideoMuted] = useState(true);\n  const [localVideoStream, setLocalVideoStream] = useState(new MediaStream());\n  const [localVideoPlaysInline, setLocalVideoPlaysInline] = useState(true);\n  const [localVideoMessages, setLocalVideoMessages] = useState(\"\");\n  const joinHandler = async () => {\n    const peer = new Peer({ key: SKYWAY_API_KEY });\n\n    if (!peer.open) {\n      return;\n    }\n\n    const room = peer.joinRoom(roomId, {\n      mode: getRoomModeByHash(),\n      stream: await getLocalStream(),\n    });\n\n    room.once(\"open\", () => {\n      setLocalVideoMessages(localVideoMessages + \"=== You joined ===\\n\");\n    });\n    room.on(\"peerJoin\", (peerId) => {\n      setLocalVideoMessages(localVideoMessages + `=== ${peerId} joined ===\\n`);\n    });\n\n    // Render remote stream for new peer join in the room\n    room.on(\"stream\", async (stream) => {\n      const newVideo = document.createElement(\"video\");\n      newVideo.srcObject = stream;\n      setLocalVideoPlaysInline(true);\n      // mark peerId to find it later at peerLeave event\n      newVideo.setAttribute(\"data-peer-id\", stream.peerId);\n      document.getElementById(\"remote-streams\").append(newVideo);\n      await newVideo.play().catch(console.error);\n    });\n\n    room.on(\"data\", ({ data, src }) => {\n      // Show a message sent to the room and who sent\n      setLocalVideoMessages(localVideoMessages + `${src}: ${data}\\n`);\n    });\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"hashchange\", () =>\n      setRoomMode(getRoomModeByHash())\n    );\n\n    getLocalStream()\n      .then((stream) => {\n        setLocalVideoStream(stream);\n        return joinHandler();\n      })\n      .then(() => {});\n  }, [localVideoStream]);\n\n  return (\n    <div>\n      <div className=\"container\">\n        <h1 className=\"heading\">Room Example タイトル</h1>\n        <p className=\"note\">Enter remote peer ID to call.</p>\n        <div className=\"p2p-media\">\n          <div className=\"remote-stream\">\n            <video id=\"video-remote-stream\"></video>\n          </div>\n          <div className=\"local-stream\">\n            <video\n              id=\"video-local-stream\"\n              muted={localVideoMuted}\n              ref={async (video) => {\n                // Cannot set property 'srcObject' of null問題\n                video.srcObject = await getLocalStream();\n                await video.play();\n              }}\n              playsInline={localVideoPlaysInline}\n            ></video>\n            <p>\n              Your ID: <span id=\"local-id\"></span>\n            </p>\n            <input\n              type=\"text\"\n              placeholder=\"Remote Peer ID\"\n              id=\"remote-id\"\n            ></input>\n            <button id=\"call-trigger\">Join</button>\n            <button id=\"close-trigger\">Leave</button>\n          </div>\n        </div>\n      </div>\n      <ul></ul>\n    </div>\n  );\n};\n\nRooms.getInitialProps = async ({ query }) => {\n  return 1;\n};\n\nexport default Rooms;\n"]},"metadata":{},"sourceType":"module"}