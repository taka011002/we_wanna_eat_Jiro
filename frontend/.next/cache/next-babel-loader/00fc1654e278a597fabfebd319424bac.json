{"ast":null,"code":"var _jsxFileName = \"/Users/yuzi/myprograming/we_wanna_eat_Jiro/frontend/pages/rooms.tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport Peer from \"skyway-js\";\nimport { SKYWAY_API_KEY } from \"./env\";\n\nclass Room extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getRoomModeByHash\", () => location.hash === \"#sfu\" ? \"sfu\" : \"mesh\");\n\n    _defineProperty(this, \"getLocalStream\", async () => await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: true\n    }));\n\n    this.state = {};\n  }\n\n}\n\nconst Rooms = props => {\n  const [roomMode, setRoomMode] = useState(getRoomModeByHash());\n  const [roomId, setRoomId] = useState(\"\");\n  const [localVideoMuted, setLocalVideoMuted] = useState(true);\n  const [localVideoStream, setLocalVideoStream] = useState(new MediaStream());\n  const [localVideoPlaysInline, setLocalVideoPlaysInline] = useState(true);\n  const [localVideoMessages, setLocalVideoMessages] = useState(\"\");\n\n  const joinHandler = async () => {\n    const peer = new Peer({\n      key: SKYWAY_API_KEY\n    });\n\n    if (!peer.open) {\n      return;\n    }\n\n    const room = peer.joinRoom(roomId, {\n      mode: getRoomModeByHash(),\n      stream: await getLocalStream()\n    });\n    room.once(\"open\", () => {\n      setLocalVideoMessages(localVideoMessages + \"=== You joined ===\\n\");\n    });\n    room.on(\"peerJoin\", peerId => {\n      setLocalVideoMessages(localVideoMessages + `=== ${peerId} joined ===\\n`);\n    }); // Render remote stream for new peer join in the room\n\n    room.on(\"stream\", async stream => {\n      const newVideo = document.createElement(\"video\");\n      newVideo.srcObject = stream;\n      setLocalVideoPlaysInline(true); // mark peerId to find it later at peerLeave event\n\n      newVideo.setAttribute(\"data-peer-id\", stream.peerId);\n      document.getElementById(\"remote-streams\").append(newVideo);\n      await newVideo.play().catch(console.error);\n    });\n    room.on(\"data\", ({\n      data,\n      src\n    }) => {\n      // Show a message sent to the room and who sent\n      setLocalVideoMessages(localVideoMessages + `${src}: ${data}\\n`);\n    }); // for closing room members\n\n    /*\n    room.on(\"peerLeave\", (peerId) => {\n      const remoteVideo = document\n        .getElementById(\"remote-streams\")\n        .querySelector(`[data-peer-id=${peerId}]`);\n      remoteVideo.srcObject.getTracks().forEach((track) => track.stop());\n      remoteVideo.srcObject = null;\n      remoteVideo.remove();\n      setLocalVideoMessages(localVideoMessages + `=== ${peerId} left ===\\n`);\n    });\n    */\n    // for closing myself\n\n    /*\n    room.once(\"close\", () => {\n      document\n        .getElementById(\"send-trigger\")\n        .removeEventListener(\"click\", onClickSend);\n      setLocalVideoMessages(localVideoMessages + \"== You left ===\\n\");\n      Array.from(document.getElementById(\"\").children).forEach(\n        (remoteVideo) => {\n          remoteVideo.srcObject.getTracks().forEach((track) => track.stop());\n          remoteVideo.srcObject = null;\n          remoteVideo.remove();\n        }\n      );\n    });\n    */\n\n    /*\n    function onClickSend() {\n      // Send message to all of the peers in the room via websocket\n      room.send(localText.value);\n       messages.textContent += `${peer.id}: ${localText.value}\\n`;\n      localText.value = \"\";\n    }\n    */\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"hashchange\", () => setRoomMode(getRoomModeByHash()));\n    getLocalStream().then(stream => {\n      setLocalVideoStream(stream);\n      return joinHandler();\n    }).then(() => {});\n  }, [localVideoStream]);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    className: \"heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, \"Room Example \\u30BF\\u30A4\\u30C8\\u30EB\"), __jsx(\"div\", {\n    className: \"room\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, __jsx(\"video\", {\n    id: \"local-stream\",\n    muted: localVideoMuted,\n    ref: async video => {\n      // Cannot set property 'srcObject' of null問題\n      video.srcObject = localVideoStream;\n      await video.play();\n    },\n    playsInline: localVideoPlaysInline,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }), __jsx(\"span\", {\n    id: \"room-mode\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, roomMode), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"Room Name\",\n    id: \"room-id\",\n    onChange: e => {\n      setRoomId(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }), __jsx(\"button\", {\n    id: \"join-trigger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, \"Join\"), __jsx(\"button\", {\n    id: \"leave-trigger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, \"Leave\")), __jsx(\"div\", {\n    className: \"remote-streams\",\n    id: \"remote-streams\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, __jsx(\"pre\", {\n    className: \"messages\",\n    id: \"messages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, localVideoMessages), __jsx(\"input\", {\n    type: \"text\",\n    id: \"local-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }), __jsx(\"button\", {\n    id: \"send-trigger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, \"Send\")))), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }));\n};\n\nRooms.getInitialProps = async ({\n  query\n}) => {\n  return 1;\n};\n\nexport default Rooms;","map":{"version":3,"sources":["/Users/yuzi/myprograming/we_wanna_eat_Jiro/frontend/pages/rooms.tsx"],"names":["React","Peer","SKYWAY_API_KEY","Room","Component","constructor","props","location","hash","navigator","mediaDevices","getUserMedia","audio","video","state","Rooms","roomMode","setRoomMode","useState","getRoomModeByHash","roomId","setRoomId","localVideoMuted","setLocalVideoMuted","localVideoStream","setLocalVideoStream","MediaStream","localVideoPlaysInline","setLocalVideoPlaysInline","localVideoMessages","setLocalVideoMessages","joinHandler","peer","key","open","room","joinRoom","mode","stream","getLocalStream","once","on","peerId","newVideo","document","createElement","srcObject","setAttribute","getElementById","append","play","catch","console","error","data","src","useEffect","window","addEventListener","then","e","target","value","getInitialProps","query"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport Peer from \"skyway-js\";\n\nimport { API_PATH, SKYWAY_API_KEY } from \"./env\";\n\ninterface RoomProps {}\n\ninterface RoomState {}\n\nclass Room extends React.Component<RoomProps, RoomState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {};\n  }\n  getRoomModeByHash = () => (location.hash === \"#sfu\" ? \"sfu\" : \"mesh\");\n  getLocalStream = async () =>\n    await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: true,\n    });\n}\n\nconst Rooms = (props) => {\n  const [roomMode, setRoomMode] = useState(getRoomModeByHash());\n  const [roomId, setRoomId] = useState(\"\");\n  const [localVideoMuted, setLocalVideoMuted] = useState(true);\n  const [localVideoStream, setLocalVideoStream] = useState(new MediaStream());\n  const [localVideoPlaysInline, setLocalVideoPlaysInline] = useState(true);\n  const [localVideoMessages, setLocalVideoMessages] = useState(\"\");\n  const joinHandler = async () => {\n    const peer = new Peer({ key: SKYWAY_API_KEY });\n\n    if (!peer.open) {\n      return;\n    }\n\n    const room = peer.joinRoom(roomId, {\n      mode: getRoomModeByHash(),\n      stream: await getLocalStream(),\n    });\n\n    room.once(\"open\", () => {\n      setLocalVideoMessages(localVideoMessages + \"=== You joined ===\\n\");\n    });\n    room.on(\"peerJoin\", (peerId) => {\n      setLocalVideoMessages(localVideoMessages + `=== ${peerId} joined ===\\n`);\n    });\n\n    // Render remote stream for new peer join in the room\n    room.on(\"stream\", async (stream) => {\n      const newVideo = document.createElement(\"video\");\n      newVideo.srcObject = stream;\n      setLocalVideoPlaysInline(true);\n      // mark peerId to find it later at peerLeave event\n      newVideo.setAttribute(\"data-peer-id\", stream.peerId);\n      document.getElementById(\"remote-streams\").append(newVideo);\n      await newVideo.play().catch(console.error);\n    });\n\n    room.on(\"data\", ({ data, src }) => {\n      // Show a message sent to the room and who sent\n      setLocalVideoMessages(localVideoMessages + `${src}: ${data}\\n`);\n    });\n\n    // for closing room members\n    /*\n    room.on(\"peerLeave\", (peerId) => {\n      const remoteVideo = document\n        .getElementById(\"remote-streams\")\n        .querySelector(`[data-peer-id=${peerId}]`);\n      remoteVideo.srcObject.getTracks().forEach((track) => track.stop());\n      remoteVideo.srcObject = null;\n      remoteVideo.remove();\n      setLocalVideoMessages(localVideoMessages + `=== ${peerId} left ===\\n`);\n    });\n    */\n\n    // for closing myself\n    /*\n    room.once(\"close\", () => {\n      document\n        .getElementById(\"send-trigger\")\n        .removeEventListener(\"click\", onClickSend);\n      setLocalVideoMessages(localVideoMessages + \"== You left ===\\n\");\n      Array.from(document.getElementById(\"\").children).forEach(\n        (remoteVideo) => {\n          remoteVideo.srcObject.getTracks().forEach((track) => track.stop());\n          remoteVideo.srcObject = null;\n          remoteVideo.remove();\n        }\n      );\n    });\n    */\n\n    /*\n    function onClickSend() {\n      // Send message to all of the peers in the room via websocket\n      room.send(localText.value);\n\n      messages.textContent += `${peer.id}: ${localText.value}\\n`;\n      localText.value = \"\";\n    }\n    */\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"hashchange\", () =>\n      setRoomMode(getRoomModeByHash())\n    );\n\n    getLocalStream()\n      .then((stream) => {\n        setLocalVideoStream(stream);\n        return joinHandler();\n      })\n      .then(() => {});\n  }, [localVideoStream]);\n\n  return (\n    <div>\n      <div className=\"container\">\n        <h1 className=\"heading\">Room Example タイトル</h1>\n        <div className=\"room\">\n          <div>\n            <video\n              id=\"local-stream\"\n              muted={localVideoMuted}\n              ref={async (video) => {\n                // Cannot set property 'srcObject' of null問題\n                video.srcObject = localVideoStream;\n                await video.play();\n              }}\n              playsInline={localVideoPlaysInline}\n            ></video>\n            <span id=\"room-mode\">{roomMode}</span>\n            <input\n              type=\"text\"\n              placeholder=\"Room Name\"\n              id=\"room-id\"\n              onChange={(e) => {\n                setRoomId(e.target.value);\n              }}\n            />\n            <button id=\"join-trigger\">Join</button>\n            <button id=\"leave-trigger\">Leave</button>\n          </div>\n          <div className=\"remote-streams\" id=\"remote-streams\"></div>\n          <div>\n            <pre className=\"messages\" id=\"messages\">\n              {localVideoMessages}\n            </pre>\n            <input type=\"text\" id=\"local-text\" />\n            <button id=\"send-trigger\">Send</button>\n          </div>\n        </div>\n      </div>\n      <ul></ul>\n    </div>\n  );\n};\n\nRooms.getInitialProps = async ({ query }) => {\n  return 1;\n};\n\nexport default Rooms;\n"]},"metadata":{},"sourceType":"module"}