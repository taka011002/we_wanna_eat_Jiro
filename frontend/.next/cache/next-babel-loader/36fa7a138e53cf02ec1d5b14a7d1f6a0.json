{"ast":null,"code":"var _jsxFileName = \"/Users/yuzi/myprograming/we_wanna_eat_Jiro/frontend/pages/rooms.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport Peer from \"skyway-js\";\nimport { SKYWAY_API_KEY } from \"./env\";\n\nconst Rooms = props => {\n  const getRoomModeByHash = () => location.hash === \"#sfu\" ? \"sfu\" : \"mesh\";\n\n  const getLocalStream = async () => await navigator.mediaDevices.getUserMedia({\n    audio: true,\n    video: true\n  }).catch(console.error);\n\n  const {\n    0: roomMode,\n    1: setRoomMode\n  } = useState(getRoomModeByHash());\n  const {\n    0: roomId,\n    1: setRoomId\n  } = useState(\"\");\n  const {\n    0: localVideoMuted,\n    1: setLocalVideoMuted\n  } = useState(true);\n  const {\n    0: localVideoStream,\n    1: setLocalVideoStream\n  } = useState(new MediaStream());\n  const {\n    0: localVideoPlaysInline,\n    1: setLocalVideoPlaysInline\n  } = useState(true);\n  const {\n    0: localVideoMessages,\n    1: setLocalVideoMessages\n  } = useState(\"\");\n\n  const joinHandler = async () => {\n    const peer = new Peer({\n      key: SKYWAY_API_KEY\n    });\n\n    if (!peer.open) {\n      return;\n    }\n\n    const room = peer.joinRoom(roomId, {\n      mode: getRoomModeByHash(),\n      stream: await getLocalStream()\n    });\n    room.once(\"open\", () => {\n      setLocalVideoMessages(localVideoMessages + \"=== You joined ===\\n\");\n    });\n    room.on(\"peerJoin\", peerId => {\n      setLocalVideoMessages(localVideoMessages + `=== ${peerId} joined ===\\n`);\n    }); // Render remote stream for new peer join in the room\n\n    room.on(\"stream\", async stream => {\n      const newVideo = document.createElement(\"video\");\n      newVideo.srcObject = stream;\n      setLocalVideoPlaysInline(true); // mark peerId to find it later at peerLeave event\n\n      newVideo.setAttribute(\"data-peer-id\", stream.peerId);\n      document.getElementById(\"remote-streams\").append(newVideo);\n      await newVideo.play().catch(console.error);\n    });\n    room.on(\"data\", ({\n      data,\n      src\n    }) => {\n      // Show a message sent to the room and who sent\n      setLocalVideoMessages(localVideoMessages + `${src}: ${data}\\n`);\n    });\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"hashchange\", () => setRoomMode(getRoomModeByHash()));\n    getLocalStream().then(stream => {\n      setLocalVideoStream(stream);\n      return joinHandler();\n    }).then(() => {});\n  }, [localVideoStream]);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    className: \"heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"Room Example \\u30BF\\u30A4\\u30C8\\u30EB\"), __jsx(\"p\", {\n    className: \"note\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, \"Enter remote peer ID to call.\"), __jsx(\"div\", {\n    className: \"p2p-media\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"remote-stream\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, __jsx(\"video\", {\n    id: \"video-remote-stream\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    className: \"local-stream\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, __jsx(\"video\", {\n    id: \"video-local-stream\",\n    muted: localVideoMuted,\n    ref: async video => {\n      // Cannot set property 'srcObject' of null問題\n      video.srcObject = await getLocalStream();\n      await video.play();\n    },\n    playsInline: localVideoPlaysInline,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, \"Your ID: \", __jsx(\"span\", {\n    id: \"local-id\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 24\n    }\n  })), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"Remote Peer ID\",\n    id: \"remote-id\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }), __jsx(\"button\", {\n    id: \"call-trigger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, \"Join\"), __jsx(\"button\", {\n    id: \"close-trigger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, \"Leave\")))), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }));\n};\n\nRooms.getInitialProps = async ({\n  query\n}) => {\n  return 1;\n};\n\nexport default Rooms;","map":{"version":3,"sources":["/Users/yuzi/myprograming/we_wanna_eat_Jiro/frontend/pages/rooms.tsx"],"names":["useState","useEffect","Peer","SKYWAY_API_KEY","Rooms","props","getRoomModeByHash","location","hash","getLocalStream","navigator","mediaDevices","getUserMedia","audio","video","catch","console","error","roomMode","setRoomMode","roomId","setRoomId","localVideoMuted","setLocalVideoMuted","localVideoStream","setLocalVideoStream","MediaStream","localVideoPlaysInline","setLocalVideoPlaysInline","localVideoMessages","setLocalVideoMessages","joinHandler","peer","key","open","room","joinRoom","mode","stream","once","on","peerId","newVideo","document","createElement","srcObject","setAttribute","getElementById","append","play","data","src","window","addEventListener","then","getInitialProps","query"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport Peer from \"skyway-js\";\n\nimport { API_PATH, SKYWAY_API_KEY } from \"./env\";\n\nconst Rooms = (props) => {\n  const getRoomModeByHash = () => (location.hash === \"#sfu\" ? \"sfu\" : \"mesh\");\n\n  const getLocalStream = async () =>\n    await navigator.mediaDevices\n      .getUserMedia({\n        audio: true,\n        video: true,\n      })\n      .catch(console.error);\n\n  const [roomMode, setRoomMode] = useState(getRoomModeByHash());\n  const [roomId, setRoomId] = useState(\"\");\n  const [localVideoMuted, setLocalVideoMuted] = useState(true);\n  const [localVideoStream, setLocalVideoStream] = useState(new MediaStream());\n  const [localVideoPlaysInline, setLocalVideoPlaysInline] = useState(true);\n  const [localVideoMessages, setLocalVideoMessages] = useState(\"\");\n  const joinHandler = async () => {\n    const peer = new Peer({ key: SKYWAY_API_KEY });\n\n    if (!peer.open) {\n      return;\n    }\n\n    const room = peer.joinRoom(roomId, {\n      mode: getRoomModeByHash(),\n      stream: await getLocalStream(),\n    });\n\n    room.once(\"open\", () => {\n      setLocalVideoMessages(localVideoMessages + \"=== You joined ===\\n\");\n    });\n    room.on(\"peerJoin\", (peerId) => {\n      setLocalVideoMessages(localVideoMessages + `=== ${peerId} joined ===\\n`);\n    });\n\n    // Render remote stream for new peer join in the room\n    room.on(\"stream\", async (stream) => {\n      const newVideo = document.createElement(\"video\");\n      newVideo.srcObject = stream;\n      setLocalVideoPlaysInline(true);\n      // mark peerId to find it later at peerLeave event\n      newVideo.setAttribute(\"data-peer-id\", stream.peerId);\n      document.getElementById(\"remote-streams\").append(newVideo);\n      await newVideo.play().catch(console.error);\n    });\n\n    room.on(\"data\", ({ data, src }) => {\n      // Show a message sent to the room and who sent\n      setLocalVideoMessages(localVideoMessages + `${src}: ${data}\\n`);\n    });\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"hashchange\", () =>\n      setRoomMode(getRoomModeByHash())\n    );\n\n    getLocalStream()\n      .then((stream) => {\n        setLocalVideoStream(stream);\n        return joinHandler();\n      })\n      .then(() => {});\n  }, [localVideoStream]);\n\n  return (\n    <div>\n      <div className=\"container\">\n        <h1 className=\"heading\">Room Example タイトル</h1>\n        <p className=\"note\">Enter remote peer ID to call.</p>\n        <div className=\"p2p-media\">\n          <div className=\"remote-stream\">\n            <video id=\"video-remote-stream\"></video>\n          </div>\n          <div className=\"local-stream\">\n            <video\n              id=\"video-local-stream\"\n              muted={localVideoMuted}\n              ref={async (video) => {\n                // Cannot set property 'srcObject' of null問題\n                video.srcObject = await getLocalStream();\n                await video.play();\n              }}\n              playsInline={localVideoPlaysInline}\n            ></video>\n            <p>\n              Your ID: <span id=\"local-id\"></span>\n            </p>\n            <input\n              type=\"text\"\n              placeholder=\"Remote Peer ID\"\n              id=\"remote-id\"\n            ></input>\n            <button id=\"call-trigger\">Join</button>\n            <button id=\"close-trigger\">Leave</button>\n          </div>\n        </div>\n      </div>\n      <ul></ul>\n    </div>\n  );\n};\n\nRooms.getInitialProps = async ({ query }) => {\n  return 1;\n};\n\nexport default Rooms;\n"]},"metadata":{},"sourceType":"module"}