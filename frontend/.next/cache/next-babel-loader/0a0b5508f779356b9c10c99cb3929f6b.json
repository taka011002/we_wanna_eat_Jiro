{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/yuzi/myprograming/we_wanna_eat_Jiro/frontend/pages/rooms.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useRef } from \"react\";\nimport Peer from \"skyway-js\";\nimport { SKYWAY_API_KEY } from \"./env\";\n\nvar Rooms = function Rooms(props) {\n  var localStreamSetting = function localStreamSetting() {\n    return _regeneratorRuntime.async(function localStreamSetting$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(navigator.mediaDevices.getUserMedia({\n              audio: true,\n              video: true\n            }));\n\n          case 2:\n            localStreamRef.current.srcObject = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(localStreamRef.current.play());\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var localStreamRef = useRef(null);\n  var remoteStreamRef = useRef(null);\n\n  var _useState = useState(\"\"),\n      localId = _useState[0],\n      setLocalId = _useState[1];\n\n  var _useState2 = useState(true),\n      localVideoMuted = _useState2[0],\n      setLocalVideoMuted = _useState2[1];\n\n  var _useState3 = useState(true),\n      localVideoPlaysInline = _useState3[0],\n      setLocalVideoPlaysInline = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      remoteId = _useState4[0],\n      setRemoteId = _useState4[1];\n\n  var _useState5 = useState(true),\n      remoteVideoMuted = _useState5[0],\n      setRemoteVideoMuted = _useState5[1];\n\n  var _useState6 = useState(false),\n      remoteVideoPlaysInline = _useState6[0],\n      setRemoteVideoPlaysInline = _useState6[1];\n\n  var peer = new Peer({\n    key: SKYWAY_API_KEY\n  });\n\n  var callTrigerClick = function callTrigerClick() {\n    var mediaConnection, connectionClose;\n    return _regeneratorRuntime.async(function callTrigerClick$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (peer.open) {\n              _context3.next = 2;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 2:\n            _context3.t0 = peer;\n            _context3.t1 = remoteId;\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(navigator.mediaDevices.getUserMedia({\n              audio: true,\n              video: true\n            }));\n\n          case 6:\n            _context3.t2 = _context3.sent;\n            mediaConnection = _context3.t0.call.call(_context3.t0, _context3.t1, _context3.t2);\n            mediaConnection.on(\"stream\", function _callee(stream) {\n              return _regeneratorRuntime.async(function _callee$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      // Render remote stream for caller\n                      remoteStreamRef.current.srcObject = stream;\n                      setRemoteVideoPlaysInline(true);\n                      _context2.next = 4;\n                      return _regeneratorRuntime.awrap(remoteStreamRef.current.play()[\"catch\"](console.error));\n\n                    case 4:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            });\n            mediaConnection.once(\"close\", function () {\n              if (remoteStreamRef.current.srcObject instanceof MediaStream) remoteStreamRef.current.srcObject.getTracks().forEach(function (track) {\n                return track.stop();\n              });\n              remoteStreamRef.current.srcObject = null;\n            });\n\n            connectionClose = function connectionClose() {\n              return mediaConnection.close(true);\n            };\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  peer.once(\"open\", function (id) {\n    return setLocalId(id);\n  }); // Register callee handler\n\n  peer.on(\"call\", function (mediaConnection) {\n    if (localStreamRef.current.srcObject instanceof MediaStream) mediaConnection.answer(localStreamRef.current.srcObject);\n    mediaConnection.on(\"stream\", function _callee2(stream) {\n      return _regeneratorRuntime.async(function _callee2$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              // Render remote stream for callee\n              remoteStreamRef.current.srcObject = stream;\n              setRemoteVideoPlaysInline(true);\n              _context4.next = 4;\n              return _regeneratorRuntime.awrap(remoteStreamRef.current.play()[\"catch\"](console.error));\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n    mediaConnection.once(\"close\", function () {\n      if (remoteStreamRef.current.srcObject instanceof MediaStream) remoteStreamRef.current.srcObject.getTracks().forEach(function (track) {\n        return track.stop();\n      });\n      remoteStreamRef.current.srcObject = null;\n    });\n    document.getElementById(\"close-trigger\").addEventListener(\"click\", function () {\n      return mediaConnection.close(true);\n    });\n  });\n  peer.on(\"error\", console.error);\n  useEffect(function () {\n    (function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _regeneratorRuntime.awrap(localStreamSetting());\n\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    className: \"heading\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \"Room Example \\u30BF\\u30A4\\u30C8\\u30EB\"), __jsx(\"p\", {\n    className: \"note\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, \"Enter remote peer ID to call.\"), __jsx(\"div\", {\n    className: \"p2p-media\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"remote-stream\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, __jsx(\"video\", {\n    id: \"video-remote-stream\",\n    muted: remoteVideoMuted,\n    ref: remoteStreamRef,\n    playsInline: remoteVideoPlaysInline,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    className: \"local-stream\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, __jsx(\"video\", {\n    id: \"video-local-stream\",\n    muted: localVideoMuted,\n    ref: localStreamRef,\n    playsInline: localVideoPlaysInline,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, \"Your ID: \", __jsx(\"span\", {\n    id: \"local-id\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 24\n    }\n  }, localId)), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"Remote Peer ID\",\n    id: \"remote-id\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }), __jsx(\"button\", {\n    id: \"call-trigger\",\n    onClick: callTrigerClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, \"Join\"), __jsx(\"button\", {\n    id: \"close-trigger\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, \"Leave\")))), __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Rooms;","map":{"version":3,"sources":["/Users/yuzi/myprograming/we_wanna_eat_Jiro/frontend/pages/rooms.tsx"],"names":["useState","useEffect","useRef","Peer","SKYWAY_API_KEY","Rooms","props","localStreamSetting","navigator","mediaDevices","getUserMedia","audio","video","localStreamRef","current","srcObject","play","remoteStreamRef","localId","setLocalId","localVideoMuted","setLocalVideoMuted","localVideoPlaysInline","setLocalVideoPlaysInline","remoteId","setRemoteId","remoteVideoMuted","setRemoteVideoMuted","remoteVideoPlaysInline","setRemoteVideoPlaysInline","peer","key","callTrigerClick","open","mediaConnection","call","on","stream","console","error","once","MediaStream","getTracks","forEach","track","stop","connectionClose","close","id","answer","document","getElementById","addEventListener"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport Peer from \"skyway-js\";\n\nimport { API_PATH, SKYWAY_API_KEY } from \"./env\";\n\nconst Rooms = (props) => {\n  const localStreamSetting = async () => {\n    localStreamRef.current.srcObject = await navigator.mediaDevices.getUserMedia(\n      {\n        audio: true,\n        video: true,\n      }\n    );\n    await localStreamRef.current.play();\n  };\n\n  const localStreamRef = useRef<HTMLVideoElement>(null);\n  const remoteStreamRef = useRef<HTMLVideoElement>(null);\n\n  const [localId, setLocalId] = useState(\"\");\n  const [localVideoMuted, setLocalVideoMuted] = useState(true);\n  const [localVideoPlaysInline, setLocalVideoPlaysInline] = useState(true);\n\n  const [remoteId, setRemoteId] = useState(\"\");\n  const [remoteVideoMuted, setRemoteVideoMuted] = useState(true);\n  const [remoteVideoPlaysInline, setRemoteVideoPlaysInline] = useState(false);\n\n  const peer = new Peer({ key: SKYWAY_API_KEY });\n\n  const callTrigerClick = async () => {\n    // Note that you need to ensure the peer has connected to signaling server\n    // before using methods of peer instance.\n    if (!peer.open) {\n      return;\n    }\n\n    const mediaConnection = peer.call(\n      remoteId,\n      await navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true,\n      })\n    );\n\n    mediaConnection.on(\"stream\", async (stream: MediaStream) => {\n      // Render remote stream for caller\n      remoteStreamRef.current.srcObject = stream;\n      setRemoteVideoPlaysInline(true);\n      await remoteStreamRef.current.play().catch(console.error);\n    });\n\n    mediaConnection.once(\"close\", () => {\n      if (remoteStreamRef.current.srcObject instanceof MediaStream)\n        remoteStreamRef.current.srcObject\n          .getTracks()\n          .forEach((track) => track.stop());\n      remoteStreamRef.current.srcObject = null;\n    });\n\n    const connectionClose = () => mediaConnection.close(true);\n  };\n\n  peer.once(\"open\", (id) => setLocalId(id));\n\n  // Register callee handler\n  peer.on(\"call\", (mediaConnection) => {\n    if (localStreamRef.current.srcObject instanceof MediaStream)\n      mediaConnection.answer(localStreamRef.current.srcObject);\n\n    mediaConnection.on(\"stream\", async (stream) => {\n      // Render remote stream for callee\n      remoteStreamRef.current.srcObject = stream;\n      setRemoteVideoPlaysInline(true);\n      await remoteStreamRef.current.play().catch(console.error);\n    });\n\n    mediaConnection.once(\"close\", () => {\n      if (remoteStreamRef.current.srcObject instanceof MediaStream)\n        remoteStreamRef.current.srcObject\n          .getTracks()\n          .forEach((track) => track.stop());\n      remoteStreamRef.current.srcObject = null;\n    });\n\n    document\n      .getElementById(\"close-trigger\")\n      .addEventListener(\"click\", () => mediaConnection.close(true));\n  });\n  peer.on(\"error\", console.error);\n\n  useEffect(() => {\n    (async () => {\n      await localStreamSetting();\n    })();\n  }, []);\n  return (\n    <div>\n      <div className=\"container\">\n        <h1 className=\"heading\">Room Example タイトル</h1>\n        <p className=\"note\">Enter remote peer ID to call.</p>\n        <div className=\"p2p-media\">\n          <div className=\"remote-stream\">\n            <video\n              id=\"video-remote-stream\"\n              muted={remoteVideoMuted}\n              ref={remoteStreamRef}\n              playsInline={remoteVideoPlaysInline}\n            ></video>\n          </div>\n          <div className=\"local-stream\">\n            <video\n              id=\"video-local-stream\"\n              muted={localVideoMuted}\n              ref={localStreamRef}\n              playsInline={localVideoPlaysInline}\n            ></video>\n            <p>\n              Your ID: <span id=\"local-id\">{localId}</span>\n            </p>\n            <input\n              type=\"text\"\n              placeholder=\"Remote Peer ID\"\n              id=\"remote-id\"\n            ></input>\n            <button id=\"call-trigger\" onClick={callTrigerClick}>\n              Join\n            </button>\n            <button id=\"close-trigger\">Leave</button>\n          </div>\n        </div>\n      </div>\n      <ul></ul>\n    </div>\n  );\n};\n\nexport default Rooms;\n"]},"metadata":{},"sourceType":"module"}