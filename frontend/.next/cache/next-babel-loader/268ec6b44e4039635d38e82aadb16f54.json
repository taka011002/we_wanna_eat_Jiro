{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/yuzi/myprograming/next-todo/pages/rooms.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport Peer from \"skyway-js\";\nimport { SKYWAY_API_KEY } from \"./env\";\n\nvar Rooms = function Rooms(props) {\n  var getRoomModeByHash = function getRoomModeByHash() {\n    return location.hash === \"#sfu\" ? \"sfu\" : \"mesh\";\n  };\n\n  var _useState = useState(getRoomModeByHash()),\n      roomMode = _useState[0],\n      setRoomMode = _useState[1];\n\n  var _useState2 = useState(true),\n      localVideoMuted = _useState2[0],\n      setLocalVideoMuted = _useState2[1];\n\n  var _useState3 = useState(true),\n      localVideoPlaysInline = _useState3[0],\n      setLocalVideoPlaysInline = _useState3[1];\n\n  var peer = new Peer({\n    key: SKYWAY_API_KEY\n  });\n  useEffect(function () {\n    window.addEventListener(\"hashchange\", function () {\n      return setRoomMode(getRoomModeByHash());\n    });\n  }, []);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    className: \"heading\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, \"Room Example \\u30BF\\u30A4\\u30C8\\u30EB\"), __jsx(\"div\", {\n    className: \"room\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }, __jsx(\"video\", {\n    id: \"local-stream\",\n    muted: localVideoMuted,\n    ref: function _callee(video) {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(navigator.mediaDevices.getUserMedia({\n                audio: true,\n                video: true\n              }));\n\n            case 2:\n              video.srcObject = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(video.play());\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    playsInline: localVideoPlaysInline,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }), __jsx(\"span\", {\n    id: \"room-mode\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, roomMode), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"Room Name\",\n    id: \"js-room-id\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }), __jsx(\"button\", {\n    id: \"join-trigger\",\n    onClick: function onClick() {\n      // Note that you need to ensure the peer has connected to signaling server\n      // before using methods of peer instance.\n      if (!peer.open) {\n        return;\n      }\n\n      var room = peer.joinRoom(roomId.value, {\n        mode: getRoomModeByHash(),\n        stream: localStream\n      });\n      room.once(\"open\", function () {\n        messages.textContent += \"=== You joined ===\\n\";\n      });\n      room.on(\"peerJoin\", function (peerId) {\n        messages.textContent += \"=== \".concat(peerId, \" joined ===\\n\");\n      }); // Render remote stream for new peer join in the room\n\n      room.on(\"stream\", function _callee2(stream) {\n        var newVideo;\n        return _regeneratorRuntime.async(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                newVideo = document.createElement(\"video\");\n                newVideo.srcObject = stream;\n                newVideo.playsInline = true; // mark peerId to find it later at peerLeave event\n\n                newVideo.setAttribute(\"data-peer-id\", stream.peerId);\n                remoteVideos.append(newVideo);\n                _context2.next = 7;\n                return _regeneratorRuntime.awrap(newVideo.play()[\"catch\"](console.error));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      });\n      room.on(\"data\", function (_ref) {\n        var data = _ref.data,\n            src = _ref.src;\n        // Show a message sent to the room and who sent\n        messages.textContent += \"\".concat(src, \": \").concat(data, \"\\n\");\n      }); // for closing room members\n\n      room.on(\"peerLeave\", function (peerId) {\n        var remoteVideo = remoteVideos.querySelector(\"[data-peer-id=\".concat(peerId, \"]\"));\n        remoteVideo.srcObject.getTracks().forEach(function (track) {\n          return track.stop();\n        });\n        remoteVideo.srcObject = null;\n        remoteVideo.remove();\n        messages.textContent += \"=== \".concat(peerId, \" left ===\\n\");\n      }); // for closing myself\n\n      room.once(\"close\", function () {\n        sendTrigger.removeEventListener(\"click\", onClickSend);\n        messages.textContent += \"== You left ===\\n\";\n        Array.from(remoteVideos.children).forEach(function (remoteVideo) {\n          remoteVideo.srcObject.getTracks().forEach(function (track) {\n            return track.stop();\n          });\n          remoteVideo.srcObject = null;\n          remoteVideo.remove();\n        });\n      });\n      sendTrigger.addEventListener(\"click\", onClickSend);\n      leaveTrigger.addEventListener(\"click\", function () {\n        return room.close();\n      }, {\n        once: true\n      });\n\n      function onClickSend() {\n        // Send message to all of the peers in the room via websocket\n        room.send(localText.value);\n        messages.textContent += \"\".concat(peer.id, \": \").concat(localText.value, \"\\n\");\n        localText.value = \"\";\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, \"Join\"), __jsx(\"button\", {\n    id: \"leave-trigger\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, \"Leave\")), __jsx(\"div\", {\n    className: \"remote-streams\",\n    id: \"js-remote-streams\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, __jsx(\"pre\", {\n    className: \"messages\",\n    id: \"messages\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    id: \"local-text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }), __jsx(\"button\", {\n    id: \"send-trigger\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, \"Send\")))), __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }));\n};\n\nRooms.getInitialProps = function _callee3(_ref2) {\n  var query;\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          query = _ref2.query;\n          return _context3.abrupt(\"return\", 1);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Rooms;","map":{"version":3,"sources":["/Users/yuzi/myprograming/next-todo/pages/rooms.tsx"],"names":["useState","useEffect","Peer","SKYWAY_API_KEY","Rooms","props","getRoomModeByHash","location","hash","roomMode","setRoomMode","localVideoMuted","setLocalVideoMuted","localVideoPlaysInline","setLocalVideoPlaysInline","peer","key","window","addEventListener","video","navigator","mediaDevices","getUserMedia","audio","srcObject","play","open","room","joinRoom","roomId","value","mode","stream","localStream","once","messages","textContent","on","peerId","newVideo","document","createElement","playsInline","setAttribute","remoteVideos","append","console","error","data","src","remoteVideo","querySelector","getTracks","forEach","track","stop","remove","sendTrigger","removeEventListener","onClickSend","Array","from","children","leaveTrigger","close","send","localText","id","getInitialProps","query"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport Peer from \"skyway-js\";\n\nimport { API_PATH, SKYWAY_API_KEY } from \"./env\";\n\nconst Rooms = (props) => {\n  const getRoomModeByHash = () => (location.hash === \"#sfu\" ? \"sfu\" : \"mesh\");\n\n  const [roomMode, setRoomMode] = useState(getRoomModeByHash());\n  const [localVideoMuted, setLocalVideoMuted] = useState(true);\n  const [localVideoPlaysInline, setLocalVideoPlaysInline] = useState(true);\n  const peer = new Peer({ key: SKYWAY_API_KEY });\n\n  useEffect(() => {\n    window.addEventListener(\"hashchange\", () =>\n      setRoomMode(getRoomModeByHash())\n    );\n  }, []);\n\n  return (\n    <div>\n      <div className=\"container\">\n        <h1 className=\"heading\">Room Example タイトル</h1>\n        <div className=\"room\">\n          <div>\n            <video\n              id=\"local-stream\"\n              muted={localVideoMuted}\n              ref={async (video) => {\n                // Cannot set property 'srcObject' of null問題\n                video.srcObject = await navigator.mediaDevices.getUserMedia({\n                  audio: true,\n                  video: true,\n                });\n                await video.play();\n              }}\n              playsInline={localVideoPlaysInline}\n            ></video>\n            <span id=\"room-mode\">{roomMode}</span>\n            <input type=\"text\" placeholder=\"Room Name\" id=\"js-room-id\" />\n            <button\n              id=\"join-trigger\"\n              onClick={() => {\n                // Note that you need to ensure the peer has connected to signaling server\n                // before using methods of peer instance.\n                if (!peer.open) {\n                  return;\n                }\n\n                const room = peer.joinRoom(roomId.value, {\n                  mode: getRoomModeByHash(),\n                  stream: localStream,\n                });\n\n                room.once(\"open\", () => {\n                  messages.textContent += \"=== You joined ===\\n\";\n                });\n                room.on(\"peerJoin\", (peerId) => {\n                  messages.textContent += `=== ${peerId} joined ===\\n`;\n                });\n\n                // Render remote stream for new peer join in the room\n                room.on(\"stream\", async (stream) => {\n                  const newVideo = document.createElement(\"video\");\n                  newVideo.srcObject = stream;\n                  newVideo.playsInline = true;\n                  // mark peerId to find it later at peerLeave event\n                  newVideo.setAttribute(\"data-peer-id\", stream.peerId);\n                  remoteVideos.append(newVideo);\n                  await newVideo.play().catch(console.error);\n                });\n\n                room.on(\"data\", ({ data, src }) => {\n                  // Show a message sent to the room and who sent\n                  messages.textContent += `${src}: ${data}\\n`;\n                });\n\n                // for closing room members\n                room.on(\"peerLeave\", (peerId) => {\n                  const remoteVideo = remoteVideos.querySelector(\n                    `[data-peer-id=${peerId}]`\n                  );\n                  remoteVideo.srcObject\n                    .getTracks()\n                    .forEach((track) => track.stop());\n                  remoteVideo.srcObject = null;\n                  remoteVideo.remove();\n\n                  messages.textContent += `=== ${peerId} left ===\\n`;\n                });\n\n                // for closing myself\n                room.once(\"close\", () => {\n                  sendTrigger.removeEventListener(\"click\", onClickSend);\n                  messages.textContent += \"== You left ===\\n\";\n                  Array.from(remoteVideos.children).forEach((remoteVideo) => {\n                    remoteVideo.srcObject\n                      .getTracks()\n                      .forEach((track) => track.stop());\n                    remoteVideo.srcObject = null;\n                    remoteVideo.remove();\n                  });\n                });\n\n                sendTrigger.addEventListener(\"click\", onClickSend);\n                leaveTrigger.addEventListener(\"click\", () => room.close(), {\n                  once: true,\n                });\n\n                function onClickSend() {\n                  // Send message to all of the peers in the room via websocket\n                  room.send(localText.value);\n\n                  messages.textContent += `${peer.id}: ${localText.value}\\n`;\n                  localText.value = \"\";\n                }\n              }}\n            >\n              Join\n            </button>\n            <button id=\"leave-trigger\">Leave</button>\n          </div>\n          <div className=\"remote-streams\" id=\"js-remote-streams\"></div>\n          <div>\n            <pre className=\"messages\" id=\"messages\"></pre>\n            <input type=\"text\" id=\"local-text\" />\n            <button id=\"send-trigger\">Send</button>\n          </div>\n        </div>\n      </div>\n      <ul></ul>\n    </div>\n  );\n};\n\nRooms.getInitialProps = async ({ query }) => {\n  return 1;\n};\n\nexport default Rooms;\n"]},"metadata":{},"sourceType":"module"}